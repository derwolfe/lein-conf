(+ 1 2 3)
(quit)
(defn plop [x] (x + ' hi ' + 3))
(plop 34)
(plop 'how')
(def plop(fn [x] (x + 3)))
(plop 3)
exit
(doc condp)
(defn bake
"Bakes a cake for certain amount of time, returning a cake with a new 
:tastiness level."
[pie temp time]
(assoc pie :tastiness
       (condp (* time temp) <
         400 :burned
         350 :perfect
         300 :soggy)))
(bake {:flavor :blackberry 375 10.25)
(bake {:flavor :blackberry} 375 10.25)
(intance? clojure.lang.IFn 2.5)
(intance? clojure.lang.IFn conj)
(instance? clojure.lang.IFn conj)
(exit)
(bake {:flavor :chocolate} 375 10.25)
(defn bake
  "Bakes a cake for a certain amount of time, returning a cake with a new
  :tastiness level."
  [pie temp time]
  (assoc pie :tastiness
         (condp < (* temp time)
           400 :burned
           350 :perfect
           300 :soggy)))
(defn bake
  "Bakes a cake for a certain amount of time, returning a cake with a new
  :tastiness level."
  [pie temp time]
  (assoc pie :tastiness
         (condp < (* temp time)
           400 :burned
           350 :perfect
(bake {:flavor :chocolate} 375 10.25)
(defn perimeter
  "Given a rectangle, returns a vector of its edge lengths."
  [rect]
  [(:x rect)
   (:y rect)
   (:z rect)
   (:y rect)])
(defn frame
  "Given a mat width, and a photo rectangle, figure out the size of the frame
  required by adding the mat width around all edges of the photo."
  [mat-width rect]
  (let [margin (* 2 rect)]
    {:x (+ margin (:x rect))
     :y (+ margin (:y rect))}))
(def failure-rate
  "Sometimes the wood is knotty or we screw up a cut. We'll assume we need a
  spare segment once every 8."
  1/8)
(defn spares
  "Given a list of segments, figure out roughly how many of each distinct size
  will go bad, and emit a sequence of spare segments, assuming we screw up
  `failure-rate` of them."
  [segments]
  (->> segments
       ; Compute a map of each segment length to the number of
       ; segments we'll need of that size.
       frequencies
       ; Make a list of spares for each segment length,
       ; based on how often we think we'll screw up.
       (mapcat (fn <a href="/data/posts/319/segment n">segment n</a>
                 (repeat (* failure-rate n)
                         segment)))))
(def cut-size
  "How much extra wood do we need for each cut? Let's say a mitred cut for a
  1-inch frame needs a full inch."
  1)
(defn total-wood
  [mat-width photos]
  "Given a mat width and a collection of photos, compute the total linear
  amount of wood we need to buy in order to make frames for each, given a
  2-inch mat."
  (let [segments (->> photos
                      ; Convert photos to frame dimensions
                      (map (partial frame mat-width))
                      ; Convert frames to segments
                      (mapcat perimeter))]
    ; Now, take segments
    (->> segments
         ; Add the spares
         (concat (spares segments))
         ; Include a cut between each segment
         (interpose cut-size)
         ; And sum the whole shebang.
         (reduce +))))
(->> [{:x 8
       :y 10}
      {:x 10
       :y 8}
      {:x 20
       :y 30}]
     (total-wood 2)
     (println "total inches:"))
(pst)
(source mapcat)
(defn frame
  "Given a mat width, and a photo rectangle, figure out the size of the frame
  required by adding the mat width around all edges of the photo."
  [mat-width rect]
  (let [margin (* 2 mat-width)]
    {:x (+ margin (:x rect))
     :y (+ margin (:y rect))}))
(use 'scratch.debugging :reload)
exit()
(exit)
(load "./tutorial-client")
(load "./tutorial-client/project.clj")
(load "./tutorial-client/project")
tutorial-client/app/src/tutorial_client
(load "tutorial-client/app/src/tutorial_client/start")
(exit)
((first `(+ 1 2)) 3 4)
`(+ 1 2)
(first `(+ 1 2))
(3 4)
((first `(+ 1 2)) 3 4)
((+) 3 4)
(+ 3 4)
((first `(+ 1 2)) 3 4)
((first `(+)) 3 4)
((first `(+)))
((first `(+)) 1)
((first `(+)) 0)
((first `(+)) 2)
((first `(+)) 2 2)
((first `(+)) 2 5)
(first `(+))
((clojure.core/+) 2 0)
(clojure.core/+ 2 0)
(clojure.core/+ 2 1)
((first `(+)) 2 5)
((first `(+)) 2 8)
(first `(+))
((+) 2 9)
(`(+) 2 9)
((`+) 2 9)
((+) 2 9)
(+ 2 9)
((first `(+)) 2 8)
(first `(+-ax))
(first `(-))
exit
((first `(+)) 2 5)
((first `(+)) 2 5 10)
((first `(+)) 2 5 10 11)
((first `(+)) 2 )
((first `(+)))
((first `(+)) 2 4)
(first `(+)
)
((first `(+)) 2 4)
((first `(+)) 2 4 3)
(Symbol)
`(Symbol)
(source Symbol)
(resolve '+)
(@(resolve '+))
(deref (resolve '+))
(source (deref (resolve '+)))
(source deref (resolve '+))
(source +)
((first `(1 + 3)) 2 4)
((first `(+ 3)) 2 4)
((first `(+ 3)) 2 1)
((first `(+ 3)))
(first `(+ 3))
##('anything nil :default)
#('anything nil :default)
('anything nil :default)
('+ nil :default)
('- nil :default)
exit
(exit)
